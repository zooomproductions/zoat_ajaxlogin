<?php

namespace Zooom\ZoatAjaxlogin\Controller;

use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Core\Utility\DebugUtility;
use TYPO3\CMS\Core\Messaging\FlashMessage;
use TYPO3\CMS\Extbase\Utility\LocalizationUtility;
use Zooom\ZoatAjaxlogin\Domain\Model\FrontendUser;
use Zooom\ZoatAjaxlogin\Utility;

class UserController extends \TYPO3\CMS\Extbase\Mvc\Controller\ActionController
{
    /**
     * @var \Zooom\ZoatAjaxlogin\Domain\Repository\FrontendUserRepository
     * @inject
     */
    protected $userRepository;

    /**
     * @var \Zooom\ZoatAjaxlogin\Domain\Repository\FrontendUserGroupRepository
     * @inject
     */
    protected $userGroupRepository;

    /**
     * Initializes the controller before invoking an action method.
     *
     * Override this method to solve tasks which all actions have in
     * common.
     */
    public function initializeAction()
    {
        $this->response->setHeader('X-Ajaxlogin-view', substr($this->actionMethodName, 0, -6));
    }

    /**
     * Initializes the view before invoking an action method.
     *
     * Override this method to solve assign variables common for all actions
     * or prepare the view in another way before the action is called.
     *
     * @param \TYPO3\CMS\Extbase\Mvc\View\ViewInterface $view The view to be initialized
     */
    protected function initializeView(\TYPO3\CMS\Extbase\Mvc\View\ViewInterface $view)
    {
        parent::initializeView($view);
        $view->assign('layout', ($GLOBALS['TSFE']->type > 0) ? 'Widget' : 'Profile');
    }

    /**
     * A template method for displaying custom error flash messages, or to
     * display no flash message at all on errors. Override this to customize
     * the flash message in your action controller.
     *
     * @return string|bool The flash message or FALSE if no flash message should be set
     */
    protected function getErrorFlashMessage()
    {
        return false;
    }

    /**
     * Render a login button.
     *
     * This also triggers the felogin hook so the rsaauth javascript is included in the page.
     *
     */
    public function placeholderAction()
    {
        if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['felogin']['loginFormOnSubmitFuncs'])) {
            $_params = array();
            foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['felogin']['loginFormOnSubmitFuncs'] as $funcRef) {
                list($onSub, $hid) = GeneralUtility::callUserFunction($funcRef, $_params, $this);
                $onSubmitAr[] = $onSub;
                $extraHiddenAr[] = $hid;
            }
        }
    }

    /**
     * Displays the logged-in user's info
     * or forwards to the login form if a user is not logged in.
     */
    public function infoAction()
    {
        $user = $this->userRepository->findCurrent();

        if (!is_null($user)) {
            $this->view->assign('user', $user);
        } else {
            // needed in order to trigger the JS AJAX error callback
            $this->response->setStatus(401);
            $this->forward('login');
        }
    }

    /**
     * Displays the login form.
     *
     * @param string $redirectedFrom
     */
    public function loginAction($redirectedFrom = '')
    {
        $token = $this->getFormToken();
        $this->view->assign('formToken', $token);
        $this->view->assign('redirectedFrom', $redirectedFrom);

        /* pass hidden field from e.g. rsaauth to the view */
        if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['felogin']['loginFormOnSubmitFuncs'])) {
            $_params = array();
            foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['felogin']['loginFormOnSubmitFuncs'] as $funcRef) {
                list($onSub, $hid) = GeneralUtility::callUserFunction($funcRef, $_params, $this);
                $onSubmitAr[] = $onSub;
                $extraHiddenAr[] = $hid;
            }
        }
        $this->view->assign('additionalHiddenFields', implode("\n", $extraHiddenAr));
        $this->view->assign('onSubmitCode', implode(' ', $onSubmitAr));

        $this->response->setHeader('X-Ajaxlogin-formToken', $token);

            // Implement #43791 - Preserve username in login form on login failure
        $username = trim(GeneralUtility::removeXSS(GeneralUtility::_GP('user')));
        $this->view->assign('username', $username);
    }

    /**
     * Gets called by the JS hijaxing the login form (see tx_ajaxlogin.api.User.authenticate in JS generated by the TS)
     * 1. forwards to user info if user is logged in
     * 2. forwards to the login form if a user didn't manage to log in.
     */
    public function authenticateAction()
    {
        $user = $this->userRepository->findCurrent();

        if (!is_null($user)) {
            $message = LocalizationUtility::translate('login_successful', 'zoat_ajaxlogin');
            $this->flashMessageContainer->add($message, '', FlashMessage::OK);

            $referer = GeneralUtility::_GP('referer');
            $redirectUrl = GeneralUtility::_GP('redirectUrl');
            $redirect_url = Utility\RedirectUrlUtility::findRedirectUrl($referer, $redirectUrl);
            if (!empty($redirect_url)) {
                $this->response->setHeader('X-Ajaxlogin-redirectUrl', $redirect_url);
            }
            $this->forward('info');
        } else {
            // needed in order to trigger the JS AJAX error callback
            $this->response->setStatus(401);
            $message = LocalizationUtility::translate('authentication_failed', 'zoat_ajaxlogin');
            $this->flashMessageContainer->add($message, '', FlashMessage::ERROR);
            $this->forward('login');
        }
    }

    /**
     * Displays a form for creating a new user.
     *
     * @param \Zooom\ZoatAjaxlogin\Domain\Model\FrontendUser $newUser A fresh user object taken as a basis for the rendering
     * @dontvalidate $user
     */
    public function newAction(FrontendUser $user = null)
    {
        if ($user) {
            // needed in order to trigger the JS AJAX error callback
            $this->response->setStatus(409);
        }
        if ($user && $user->getUid()) {
            // somehow the cHash got hacked, user should not have an uid
            $user = null;
        }

        $token = $this->getFormToken();
        $this->view->assign('formToken', $token);
        $this->response->setHeader('X-Ajaxlogin-formToken', $token);

        $this->view->assign('user', $user);
    }

    /**
     * Creates a new user.
     *
     * @param \Zooom\ZoatAjaxlogin\Domain\Model\FrontendUser $user          A fresh User object which has not yet been added to the repository
     * @param string                                         $passwordCheck
     */
    public function createAction(FrontendUser $user, $passwordCheck)
    {
        if ($user && $user->getUid()) {
            // somehow the cHash got hacked
            $this->forward('new');
        }
        if (GeneralUtility::_GP('additionalInfo')) {
            // honeypot field was filled
            $this->forward('new');
        }
            // TODO: clean this up and move it to the proper validators!!!
            // this much of validation shouldn't have found its way into the controller

        // START of MOVE TO VALIDATOR task
        $objectError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'user');
        $emailError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'email');
        $usernameError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'username');
        $passwordError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'password');

        $checkEmail = $this->userRepository->findOneByEmail($user->getEmail());
        $checkUsername = $this->userRepository->findOneByUsername($user->getUsername());

        if (!is_null($checkEmail)) {
            $emailError->addErrors(array(
                GeneralUtility::makeInstance('Tx_Extbase_Error_Error', 'Duplicate email address', 1320783534),
            ));
        }

        if (!is_null($checkUsername)) {
            $usernameError->addErrors(array(
                GeneralUtility::makeInstance('Tx_Extbase_Error_Error', 'Duplicate username', 1320703758),
            ));
        }

        if (strcmp($user->getPassword(), $passwordCheck) != 0) {
            $passwordError->addErrors(array(
                GeneralUtility::makeInstance('Tx_Extbase_Error_Error', 'Password does not match', 1320703779),
            ));
        }

        if (count($emailError->getErrors())) {
            $objectError->addErrors(array(
                $emailError,
            ));
        }

        if (count($usernameError->getErrors())) {
            $objectError->addErrors(array(
                $usernameError,
            ));
        }

        if (count($passwordError->getErrors())) {
            $objectError->addErrors(array(
                $passwordError,
            ));
        }

        if (count($objectError->getErrors())) {
            $requestErrors = $this->request->getErrors();

            $requestErrors[] = $objectError;

            $this->request->setErrors($requestErrors);

                // needed in order to trigger the JS AJAX error callback
            $this->response->setStatus(409);
            $this->forward('new');
        }
        // END of MOVE TO VALIDATOR task

        $userGroups = $this->userGroupRepository->findByUidArray(GeneralUtility::intExplode(',', $this->settings['defaultUserGroups']));

        $password = $user->getPassword();

        $password = Utility\PasswordUtility::salt($password);

        foreach ($userGroups as $userGroup) {
            $user->getUsergroup()->attach($userGroup);
        }

        $user->setPassword($password);

        // add a hash to verify the account by sending an e-mail
        $user->setVerificationHash(md5(GeneralUtility::generateRandomBytes(64)));
        $user->setDisable(true);

        $this->userRepository->add($user);
        $this->userRepository->_persistAll();

        $message = LocalizationUtility::translate('signup_successful', 'zoat_ajaxlogin');
        $this->flashMessageContainer->add($message, '', FlashMessage::OK);

        $this->view->assign('user', $user);

        $emailSubject = LocalizationUtility::translate('signup_notification_subject', 'zoat_ajaxlogin', array(
            GeneralUtility::getIndpEnv('TYPO3_HOST_ONLY'),
        ));

        $emailBodyContent = $this->view->render();

        $mail = GeneralUtility::makeInstance('t3lib_mail_Message');
        $mail->setFrom(array($this->settings['notificationMail']['emailAddress'] => $this->settings['notificationMail']['sender']));
        $mail->setTo(array($user->getEmail() => $user->getName()));
        $mail->setSubject($emailSubject);
        $mail->setBody($emailBodyContent);
        $mail->send();

        $referer = GeneralUtility::_GP('referer');
        $redirectUrl = GeneralUtility::_GP('redirectUrl');
        $redirect_url = Utility\RedirectUrlUtility::findRedirectUrl($referer, $redirectUrl);
        if (!empty($redirect_url)) {
            $this->response->setHeader('X-Ajaxlogin-redirectUrl', $redirect_url);
        }

        $this->forward('info');
    }

    /**
     * Perfoms the user log out and redirects to the login form.
     */
    public function logoutAction()
    {
        $message = LocalizationUtility::translate('logout_successful', 'zoat_ajaxlogin');
        $this->flashMessageContainer->add($message, '', FlashMessage::NOTICE);

        $GLOBALS['TSFE']->fe_user->logoff();

        $this->forward('login', null, null, array('redirectedFrom' => 'logout'));
    }

    /**
     * Shows the logged-in user details.
     */
    public function showAction()
    {
        $user = $this->userRepository->findCurrent();

        $this->view->assign('user', $user);
    }

    /**
     * Shows the user edit details form.
     *
     * @param \Zooom\Zoat\Ajaxlogin\Domain\Repository\FrontendUser $user
     * @dontvalidate $user
     */
    public function editAction(FrontendUser $user = null)
    {
        // double check if the passed user is indeed currently logged in user
        $currentUser = $this->userRepository->findCurrent();

        if (!$user || $user->getUid() != $currentUser->getUid()) {
            $user = $currentUser;
        }

        $this->view->assign('user', $user);
    }

    /**
     * replaces the validator of the standard user model
     * with the validator of the modified user model (without username validation.
     */
    public function initializeUpdateAction()
    {
        if ($this->arguments->hasArgument('user')) {
            /** @var \TYPO3\CMS\Extbase\Validation\ValidatorResolver $validatorResolver */
            $validatorResolver = $this->objectManager->get('TYPO3\CMS\Extbase\Validation\ValidatorResolver');
            $userForEditingValidator = $validatorResolver->getBaseValidatorConjunction('Zooom\ZoatAjaxlogin\Domain\Model\FrontendUserForEditing');

            // set validator of modified user model as standard user model
            $this->arguments->getArgument('user')->setValidator($userForEditingValidator);
        }
    }

    /**
     * Updates an existing user.
     *
     * @param \Zooom\Zoat\Ajaxlogin\Domain\Repository\FrontendUser
     */
    public function updateAction(FrontendUser $user)
    {
        // double check if the passed user is indeed currently logged in user
        $currentUser = $this->userRepository->findCurrent();

        if ($user->getUid() != $currentUser->getUid()) {
            // no way...
            $this->forward('edit');
        }

            // TODO: clean this up and move it to the proper validators!!!
            // this much of validation shouldn't have found its way into the controller
        // START of MOVE TO VALIDATOR task
        $objectError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'user');
        $emailError = GeneralUtility::makeInstance('Tx_Extbase_Validation_PropertyError', 'email');

        $checkEmail = $this->userRepository->findOneByEmail($user->getEmail());

        if (!is_null($checkEmail) && $checkEmail->getUid() != $user->getUid()) {
            $emailError->addErrors(array(
                GeneralUtility::makeInstance('Tx_Extbase_Error_Error', 'Duplicate email address', 1320783534),
            ));
        }

        if (count($emailError->getErrors())) {
            $objectError->addErrors(array(
                $emailError,
            ));
        }

        if (count($objectError->getErrors())) {
            $requestErrors = $this->request->getErrors();

            $requestErrors[] = $objectError;

            $this->request->setErrors($requestErrors);
            $this->forward('edit');
        }
        // END of MOVE TO VALIDATOR task

        // check submitted country
        if ($country) {
            $country = $this->countryRepository->findByCnShortEn($user->getCountry());
            if (!$country->count()) {
                $user->setCountry('');
            }
        }

        $this->userRepository->update($user);
        $this->flashMessageContainer->add('User updated');
        $this->forward('show');
    }

    /**
     * Activates an account based on the link in the activation mail.
     *
     * @param string $verificationHash
     * @param string $email
     */
    public function activateAccountAction($verificationHash = '', $email = '')
    {
        if (!empty($verificationHash) && !empty($email)) {
            $user = $this->userRepository->findOneByVerificationHashAndEmail($verificationHash, $email);
        }

        if (!is_null($user)) {
            $this->activateAccount($user);

            $this->userRepository->update($user);
            $this->userRepository->_persistAll();

            $this->notifyExchange($user, 'org.typo3.user.register');

            // automatically sign in the user
            Utility\FrontendUserUtility::signin($user);

            $message = LocalizationUtility::translate('account_activated', 'zoat_ajaxlogin');
            $this->flashMessageContainer->add($message, '', FlashMessage::OK);
            //$this->redirectToURI('/');
        } else {
            $message = LocalizationUtility::translate('invalid_activation_link', 'zoat_ajaxlogin');
            $this->flashMessageContainer->add($message, '', FlashMessage::ERROR);
            //$this->response->setStatus(409);
        }
    }

    /**
     * activates a user account
     * (does not persist it).
     *
     * @param \Zooom\Zoat\Ajaxlogin\Domain\Repository\FrontendUser $user
     */
    protected function activateAccount($user)
    {
        $userGroups = $this->userGroupRepository->findByUidArray(GeneralUtility::intExplode(',', $this->settings['defaultUserGroupsAfterVerification']));

        foreach ($userGroups as $userGroup) {
            $user->getUsergroup()->attach($userGroup);
        }

        $user->setVerificationHash(null);
        $user->setDisable(false);
    }

    /**
     * Shows the user/email form.
     */
    public function forgotPasswordAction()
    {
        $token = $this->getFormToken();
        $this->view->assign('formToken', $token);
        $this->response->setHeader('X-Ajaxlogin-formToken', $token);
    }

    /**
     * Tries to find a user by the username or email
     * 1. If found, resets the user's forgot password hash, sends an email with the reset link, and forwards to the login form
     * 2. If not found, displays the error message and forwards to the forgot password form again.
     *
     * @param string $usernameOrEmail
     */
    public function resetPasswordAction($usernameOrEmail = '')
    {
        $user = null;
        $usernameOrEmail = filter_var($usernameOrEmail, FILTER_SANITIZE_SPECIAL_CHARS);
        if (!empty($usernameOrEmail) && GeneralUtility::validEmail($usernameOrEmail)) {
            $user = $this->userRepository->findOneByEmail($usernameOrEmail);
        } elseif (!empty($usernameOrEmail)) {
            $user = $this->userRepository->findOneByUsername($usernameOrEmail);
        }

        if (!is_null($user)) {
            $user->setForgotHash(md5(GeneralUtility::generateRandomBytes(64)));
            $user->setForgotHashValid((time() + (24 * 3600)));
            $this->view->assign('user', $user);

            $emailSubject = LocalizationUtility::translate('resetpassword_notification_subject', 'zoat_ajaxlogin', array(
                GeneralUtility::getIndpEnv('TYPO3_HOST_ONLY'),
            ));

            $emailBodyContent = $this->view->render();

            $mail = GeneralUtility::makeInstance('t3lib_mail_Message');
            $mail->setFrom(array($this->settings['notificationMail']['emailAddress'] => $this->settings['notificationMail']['sender']));
            $mail->setTo(array($user->getEmail() => $user->getName()));
            $mail->setSubject($emailSubject);
            $mail->setBody($emailBodyContent);
            $mail->send();

            $message = LocalizationUtility::translate('resetpassword_notification_sent', 'zoat_ajaxlogin');
            $this->flashMessageContainer->add($message, '', FlashMessage::OK);

            $this->forward('info');
        } else {
            //$this->response->setStatus(409);
            $message = LocalizationUtility::translate('user_notfound', 'zoat_ajaxlogin', array($usernameOrEmail));
            $this->flashMessageContainer->add($message, '', FlashMessage::ERROR);
            $this->forward('forgotPassword');
        }
    }

    /**
     * @param string $forgotHash
     * @param string $email
     */
    public function editPasswordAction($forgotHash = '', $email = '')
    {
        $user = $this->getUserByForgotHashAndEmail($forgotHash, $email);

        if ($user) {
            $this->view->assign('user', $user);
            $this->view->assign('forgotHash', $forgotHash);
            $this->view->assign('notExpired', true);
        }
    }

    /**
     * @param array $password
     * @validate $password \Zooom\ZoatAjaxlogin\Validation\Validator\PasswordsValidator
     *
     * @param string $forgotHash
     * @param string $email
     */
    public function updatePasswordAction($password, $forgotHash = '', $email = '')
    {
        $user = $this->getUserByForgotHashAndEmail($forgotHash, $email);

        if (!$user) {
            $this->forward('editPassword');
        } else {
            $saltedPW = Utility\PasswordUtility::salt($password['new']);
            $user->setPassword($saltedPW);
            $user->setForgotHash('');
            $user->setForgotHashValid(0);
            // activate the account to allow users that could not receive a
            // verification email to activate their account with the forgot password function
            if ($user->getVerificationHash()) {
                $this->activateAccount($user);
            }
        }
    }

    /**
     * finds a user object based on the given hash and email.
     *
     * if no matching user is found a flash message is set and null returned.
     *
     * @param string $forgotHash
     * @param string $email
     *
     * @return Tx_Ajaxlogin_Domain_Model_User| null
     */
    protected function getUserByForgotHashAndEmail($forgotHash, $email)
    {
        $forgotHash = trim($forgotHash);
        if (empty($forgotHash)) {
            return $this->addForgetHashFlashMessage('forgotHash_required');
        }
        $email = trim($email);
        if (empty($email)) {
            return $this->addForgetHashFlashMessage('email_required');
        }
        if (!GeneralUtility::validEmail($email)) {
            return $this->addForgetHashFlashMessage('email_invalid');
        }

        $user = $this->userRepository->findOneByEmail($email);
        if (!$user) {
            return $this->addForgetHashFlashMessage('user_notFound');
        }

        if ($user->getForgotHash() == '') {
            return $this->addForgetHashFlashMessage('password_already_changed');
        }

        if ($user->getForgotHash() !== $forgotHash) {
            return $this->addForgetHashFlashMessage('user_notFound');
        }

        if ($user->getForgotHashValid()->format('U') <= time()) {
            // if hash is no longer valid
            return $this->addForgetHashFlashMessage('link_outdated');
        }

        return $user;
    }

    /**
     * adds a flash message if something happens in the forgetHash function.
     *
     * This method exists to follow the DRY principle and to prevent duplicate messages on redirects
     *
     * @param $key
     * @param int $severity
     */
    protected function addForgetHashFlashMessage($key, $severity = FlashMessage::WARNING)
    {
        $message = LocalizationUtility::translate($key, 'zoat_ajaxlogin');

        // check if the flash messages was already assigned
        // this is needed to prevent duplicate messages on the forward() in updatePasswordAction
        foreach ($this->flashMessageContainer->getAllMessages() as $flashMessage) {
            if ($flashMessage->getMessage() == $message && $flashMessage->getSeverity() == $severity) {
                return;
            }
        }

        $this->flashMessageContainer->add($message, '', $severity);

        return;
    }

    /**
     * Generates password-change form.
     *
     * @param $errors array     Custom validation errors.
     */
    public function changePasswordAction(array $errors = null)
    {
        $this->view->assignMultiple(array(
                'user' => $this->userRepository->findCurrent(),
                'errors' => $errors,
            )
        );
    }

    /**
     * @param array $password Associate array with the following keys.
     *                        cur   - Current password
     *                        new   - New password
     *                        check - Confirmed new password
     * @validate $password Tx_Ajaxlogin_Domain_Validator_PasswordsValidator
     *
     * @return string
     */
    public function doChangePasswordAction(array $password)
    {
        $errors = array();
        $currentUser = $this->userRepository->findCurrent();

        if (isset($password['cur']) && isset($password['new']) && isset($password['check'])) {
            $plainTextPassword = $password['cur'];
            $encryptedPassword = $currentUser->getPassword();

            if (Utility\PasswordUtility::validate($plainTextPassword, $encryptedPassword)) {
                $saltedPassword = Utility\PasswordUtility::salt($password['new']);
                $currentUser->setPassword($saltedPassword);

                    // redirect (if configured) or show static success text
                $redirectPageId = intval($this->settings['page']['passwordChangeSuccess']);
                if ($redirectPageId > 0) {
                    $this->redirectToPage($redirectPageId);
                } else {
                    return LocalizationUtility::translate('password_updated', 'zoat_ajaxlogin');
                }
            } else {
                $errors['current_password'] = LocalizationUtility::translate('password_invalid', 'zoat_ajaxlogin');
            }
        }

        $this->forward('changePassword', null, null, array('errors' => $errors));
    }

    /**
     * Redirects user to the page identified by the given page-id.
     *
     * @param int $pageId ID of the page to redirect to.
     */
    private function redirectToPage($pageId)
    {
        $uri = $this->uriBuilder
                ->reset()
                ->setTargetPageUid($pageId)
                ->build();
        $this->redirectToURI($uri);
    }

    /**
     * @return string
     */
    protected function getFormToken()
    {
        return 'tx-zoatajaxlogin-form' . md5(microtime());
    }
}
